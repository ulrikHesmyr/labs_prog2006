Todo:
- "times" => {}
- Endre error meldinger til slutt
- Rydde i koden

"if" => {
    let true = tokens.pop().unwrap()
    let false = tokens.pop().unwrap()

    match stack.pop().unwrap() {
        Datatype::Boolen(boolean) => {
            if boolean {
                expression = true;
            } else {
                expression = false;
            }

            match datatype(expression) {
                Some(dt) => stack.push(dt),
                None => Err(ProgramError::IncompleteQuotation)
            }
        },
        _ => Err(ProgramError::ExpectedBool)
    }
},

list map code

let program_variables = HashMap<String, Datatype>

"map" => {

}

fn each(token : &str, tokens : Vec<&str>, stack : Vec<Datatype>) -> Result<Datatype, ProgramError> {
    //Get the list out of token

    //Call on map and get a list with elements

    //Iterate over this list and push the element onto the stack 

}

"foldl" => {

    

    //

    //Returning accumulator as Int
}

fn foldl(init_accumulator : Datatype, list : Datatype) -> Result<Datatype, ProgramError> {
    let mut final_accumulation = init_accumulator;
    let operation = match datatype(token) {
        Some(dt) => format_stack_item(dt),
        None => token //Operator,
    };

    for item in list {
        match interpreter(&format!("{} {} {}", format_stack_item(item), format_stack_item(final_accumulation), operation)){
            Ok(new_acc_value) => final_accumulation = new_acc_value,
            Err(e) => return Err(e),
        }
    }

    Ok(Datatype::Int(final_accumulation))
}